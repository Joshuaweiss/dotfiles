# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
  # TERM env customization.
  #
  # If this property is not set, alacritty will set it to xterm-256color.
  #
  # Note that some xterm terminfo databases don't declare support for italics.
  # You can verify this by checking for the presence of `smso` and `sitm` in
  # `infocmp xterm-256color`.
  TERM: xterm-256color

scrolling:
  # How many lines of scrollback to keep,
  # '0' will disable scrolling.
  history: 10000

  # Number of lines the viewport will move for every line
  # scrolled when scrollback is enabled (history > 0).
  multiplier: 1

window:
  # Window dimensions in character columns and lines
  # (changes require restart)
  decorations: full
  dimensions:
    columns: 80
    lines: 24

  # Adds this many blank pixels of padding around the window
  # Units are physical pixels; this is not DPI aware.
  # (change requires restart)
  padding:
    x: 8
    y: 8

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
  # The normal (roman) font face to use.
  normal:
    family: "Fira Code"
    # Style can be specified to pick a specific face.
    style: Retina

  # The bold font face
  bold:
    family: Hasklig
    # Style can be specified to pick a specific face.
    style: Bold

  # The italic font face
  italic:
    family: Hasklig
    # Style can be specified to pick a specific face.
    style: Italic

  # Point size of the font
  size: 14.0

  # Offset is the extra space around each character. offset.y can be thought of
  # as modifying the linespacing, and offset.x as modifying the letter spacing.
  offset:
    x: 0
    y: 0

  # Glyph offset determines the locations of the glyphs within their cells with
  # the default being at the bottom. Increase the x offset to move the glyph to
  # the right, increase the y offset to move the glyph upward.
  glyph_offset:
    x: 0
    y: 0

  # OS X only: use thin stroke font rendering. Thin strokes are suitable
  # for retina displays, but for non-retina you probably want this set to
  # false.
  use_thin_strokes: true

  scale_with_dpi: true

background_opacity: 0.96

# Base16 Material Palenight 256 - alacritty color config
# Nate Peterson
colors:
  # Default colors
  primary:
    background: '0x182032'
    foreground: '0xa2aadb'

  # Normal colors
  normal:
    black:   '0x292d3e'
    red:     '0xf07178'
    green:   '0xc3e88d'
    yellow:  '0xffcb6b'
    blue:    '0x82aaff'
    magenta: '0xc792ea'
    cyan:    '0x89ddff'
    white:   '0x959dcb'

  # Bright colors
  bright:
    black:   '0x676e95'
    red:     '0xf07178'
    green:   '0xc3e88d'
    yellow:  '0xffcb6b'
    blue:    '0x82aaff'
    magenta: '0xc792ea'
    cyan:    '0x89ddff'
    white:   '0x959dcb'

# scorcerer colors
# colors:
#   primary:
#     background: '0x22222b'
#     foreground: '0xc2c2b0'
# 
#   cursor:
#     text:   '0xc2c2b0'
#     cursor: '0xc2c2b0'
# 
#   normal:
#     black:   '0x111111'
#     red:     '0xaa4450'
#     green:   '0x719611'
#     yellow:  '0xcc8800'
#     blue:    '0x6688aa'
#     magenta: '0x8f6f8f'
#     cyan:    '0x528b8b'
#     white:   '0xd3d3d3'
# 
#   bright:
#     black:   '0x181818'
#     red:     '0xff6a6a'
#     green:   '0xb1d631'
#     yellow:  '0xff9800'
#     blue:    '0x90b0d1'
#     magenta: '0x8181a6'
#     cyan:    '0x87ceeb'
#     white:   '0xc1cdc1'

# Colors (Tomorrow Night Bright)
# colors:
#   # Default colors
#   primary:
#     # hard contrast: background = '0x1d2021'
#     background: '#222222'
#     # soft contrast: background = '0x32302f'
#     foreground: '#eaeaea'
# 
#   # Normal colors
#   normal:
#     black:   '0x282828'
#     red:     '#d54e53'
#     green:   '#b9ca4a'
#     yellow:  '#e7c547'
#     blue:    '#7aa6da'
#     magenta: '#c397d8'
#     cyan:    '#70c0b1'
#     white:   '0xa89984'
# 
#   # Bright colors
#   bright:
#     black:   '0x928374'
#     red:     '#d54e53'
#     green:   '#b9ca4a'
#     yellow:  '#e7c547'
#     blue:    '#7aa6da'
#     magenta: '#c397d8'
#     cyan:    '#70c0b1'
#     white:   '0xebdbb2'

# # Colors (Gruvbox dark)
# colors:
#   # Default colors
#   primary:
#     # hard contrast: background = '0x1d2021'
#     background: '0x282828'
#     # soft contrast: background = '0x32302f'
#     foreground: '0xebdbb2'
# 
#   # Normal colors
#   normal:
#     black:   '0x282828'
#     red:     '0xcc241d'
#     green:   '0x98971a'
#     yellow:  '0xd79921'
#     blue:    '0x458588'
#     magenta: '0xb16286'
#     cyan:    '0x689d6a'
#     white:   '0xa89984'
# 
#   # Bright colors
#   bright:
#     black:   '0x928374'
#     red:     '0xfb4934'
#     green:   '0xb8bb26'
#     yellow:  '0xfabd2f'
#     blue:    '0x83a598'
#     magenta: '0xd3869b'
#     cyan:    '0x8ec07c'
#     white:   '0xebdbb2'

# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
  animation: EaseOutExpo
  duration: 0

# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
key_bindings:
  - { key: V,        mods: Command, action: Paste                        }
  - { key: C,        mods: Command, action: Copy                         }
  - { key: Q,        mods: Command, action: Quit                         }
  - { key: W,        mods: Command, action: Quit                         }
  - { key: N,        mods: Command, command: { program: "open", args: ["-nb", "io.alacritty"] } }
  - { key: Home,                    chars: "\x1bOH",   mode: AppCursor   }
  - { key: Home,                    chars: "\x1b[1~",  mode: ~AppCursor  }
  - { key: End,                     chars: "\x1bOF",   mode: AppCursor   }
  - { key: End,                     chars: "\x1b[4~",  mode: ~AppCursor  }
  - { key: PageUp,   mods: Shift,   chars: "\x1b[5;2~"                   }
  - { key: PageUp,   mods: Control, chars: "\x1b[5;5~"                   }
  - { key: PageUp,                  chars: "\x1b[5~"                     }
  - { key: PageDown, mods: Shift,   chars: "\x1b[6;2~"                   }
  - { key: PageDown, mods: Control, chars: "\x1b[6;5~"                   }
  - { key: PageDown,                chars: "\x1b[6~"                     }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                   }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                   }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                   }
  - { key: Left,                    chars: "\x1b[D",   mode: ~AppCursor  }
  - { key: Left,                    chars: "\x1bOD",   mode: AppCursor   }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                   }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                   }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                   }
  - { key: Right,                   chars: "\x1b[C",   mode: ~AppCursor  }
  - { key: Right,                   chars: "\x1bOC",   mode: AppCursor   }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                   }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                   }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                   }
  - { key: Up,                      chars: "\x1b[A",   mode: ~AppCursor  }
  - { key: Up,                      chars: "\x1bOA",   mode: AppCursor   }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                   }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                   }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                   }
  - { key: Down,                    chars: "\x1b[B",   mode: ~AppCursor  }
  - { key: Down,                    chars: "\x1bOB",   mode: AppCursor   }
  - { key: Tab,      mods: Shift,   chars: "\x1b[Z"                      }
  - { key: F1,                      chars: "\x1bOP"                      }
  - { key: F2,                      chars: "\x1bOQ"                      }
  - { key: F3,                      chars: "\x1bOR"                      }
  - { key: F4,                      chars: "\x1bOS"                      }
  - { key: F5,                      chars: "\x1b[15~"                    }
  - { key: F6,                      chars: "\x1b[17~"                    }
  - { key: F7,                      chars: "\x1b[18~"                    }
  - { key: F8,                      chars: "\x1b[19~"                    }
  - { key: F9,                      chars: "\x1b[20~"                    }
  - { key: F10,                     chars: "\x1b[21~"                    }
  - { key: F11,                     chars: "\x1b[23~"                    }
  - { key: F12,                     chars: "\x1b[24~"                    }
  - { key: Back,                    chars: "\x7f"                        }
  - { key: Back,     mods: Alt,     chars: "\x1b\x7f"                    }
  - { key: Insert,                  chars: "\x1b[2~"                     }
  - { key: Delete,                  chars: "\x1b[3~"                     }
  - { key: Equals,     mods: Shift | Command, action: IncreaseFontSize }
  - { key: Minus,    mods: Command, action: DecreaseFontSize }
  - { key: H, mods: Command, command: { program: "osascript", args: ["-e", "tell application \"System Events\" to tell process \"Alacritty\" to set visible to false"] } }

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }

selection:
  semantic_escape_chars: ",│`|:\"' ()[]{}<>"

hide_cursor_when_typing: false

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
  program: /bin/zsh
  args:
    - --login
